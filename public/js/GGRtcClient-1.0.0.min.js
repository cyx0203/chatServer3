class GGRtcClient{static g_pixel_mode=[{type:"qvga-240P",desc:"普通",pixel:{"width":320,"height":240}},{type:"sd-480P",desc:"标清",pixel:{"width":640,"height":480},default:true},{type:"hd-720P",desc:"高清",pixel:{"width":1280,"height":720}}];static g_iceConfig={"iceServers":[{"url":"stun:stun.l.google.com:19302"},{"url":"turn:106.12.24.238","username":"yangsu","credential":"123456"}]};constructor(options){console.log("入参options",options);this._peer=null;this._SignalServerAddr=options.SignalServerAddr||"";this._offerOption={offerToReceiveAudio:1,offerToReceiveVideo:1};this._constraints=options.constraints;if(options.muteVideo){this._offerOption={offerToReceiveAudio:1,offerToReceiveVideo:0};this._constraints.video=false;}this._room=options.roomId;this._localUser=options.userId;this._remoteUser="";this._calleeUser="";this._callerUser="";this._local_stream_video=options.local_stream_play_video;this._remote_stream_video=options.remote_stream_play_video;this._remote_share_stream_video=options.remote_share_stream_play_video||"share";this._localstream=null;this._localShareStream=null;this._localstream_id="";this._localShareStream_id="";this._remotestream_id="";this._remoteShareStream_id="";this._mediaRecorder=null;this._recBuffer=null;this._disableRateMonitor=options.disableRateMonitor||false;this._showStatInterval=null;this._isJoinRoom=false;this._isCalling=false;if(!this._room){throw new Error("未指定房间号roomId参数");}if(!this._localUser){throw new Error("未指定用户userId参数");}if(!this._local_stream_video||!this._remote_stream_video){throw new Error("未指定本地视频或对端视频的<video>标签参数");}console.log("this._SignalServerAddr",this._SignalServerAddr);this._socket=io(this._SignalServerAddr);this.callbackFunc=options.callback||{};this.initSocket(this.callbackFunc);}initSocket(callbackFunc){this._socket.on('joined',(userlist,account,socketid)=>{console.log("【服务端joined消息】用户"+account+"进入房间");console.log("当前用户列表：",userlist);let cbFuncName="onAnotherUserJoin";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](account,userlist);}});this._socket.on("broadcastMsg",(data)=>{console.log("【服务端broadcastMsg消息】"+JSON.stringify(data));let cbFuncName="onBroadcastMsg";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](data);}});this._socket.on('leaved',(userlist,account,socketid)=>{console.log("【服务端leaved消息】用户"+account+"离开房间");let cbFuncName="onAnotherUserLeave";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](account,userlist);}});this._socket.on('call',async(data)=>{console.log("【服务端call消息】入参："+JSON.stringify(data));let cbFuncName="onCall";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](data,this._isCalling);}});this._socket.on('reply',async(data)=>{console.log("【服务端reply消息】:"+JSON.stringify(data));switch(data.replyCode){case 1:this._callerUser=data.caller;this._calleeUser=data.callee;this._remoteUser=data.callee;await this._createP2P(data);await this._createOffer(data,"camera",this._localstream.id);this._isCalling=true;break;case 2:alert("对方拒绝了你的请求！");break;case 3:alert("对方正在通话中！");break;}let cbFuncName="onReply";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](data,this._isCalling);}});this._socket.on("1v1mute",(data)=>{console.log("【服务端1v1mute消息】:"+JSON.stringify(data));let cbFuncName="onRemoteMute";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](data,this._isCalling);}});this._socket.on("1v1hangup",(data)=>{console.log("【服务端1v1hangup消息】:"+JSON.stringify(data));console.log("远端主动挂断，本地也自动挂断操作");this._doHangup();let cbFuncName="onRemoteHandup";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](data,this._isCalling);}});this._socket.on("1v1UserDisconnect",(roomid,disconnect_user,userlist)=>{console.log("【服务端1v1UserDisconnect消息】"+roomid+":"+disconnect_user);console.log("远端断线，本地自动挂断");this._doHangup();let cbFuncName="onRemoteDisconnect";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](roomid,disconnect_user,userlist);}});this._socket.on("shareLocal",(data)=>{console.log("【服务端shareLocal消息】"+JSON.stringify(data));if(data.op=="share"){}else if(data.op=="unshare"){let share=document.querySelector('#'+this._remote_share_stream_video);share.srcObject=null;console.log("清除本地分享流video标签的显示");}let cbFuncName="onRemoteShare";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](data.op,data);}});this._socket.on("changeCamera",(data)=>{console.log("【服务端changeCamera消息】"+JSON.stringify(data));let cbFuncName="onRemoteChangeCamera";if(callbackFunc[cbFuncName]){callbackFunc[cbFuncName](data,this._isCalling);}});this._socket.on('1v1offer',(data)=>{console.log("【服务端1v1offer消息】:"+JSON.stringify(data));this._onOffer(data);});this._socket.on('1v1answer',(data)=>{console.log("【服务端1v1answer消息】:"+JSON.stringify(data));this._onAnswer(data);});this._socket.on('1v1ICE',(data)=>{console.log("【服务端1v1ICE消息】:"+JSON.stringify(data));this._onIce(data);});this._socket.on('connect',()=>{console.log("connect 连接服务端成功");});this._socket.on('connect_error',(error)=>{console.log("connect_error");});this._socket.on('disconnect',()=>{console.log("disconnect");});this._socket.on('reconnect',(timeout)=>{console.log("reconnect");});this._socket.on('reconnect_error',(timeout)=>{console.log("reconnect_error");});}static CheckSupportWebRTC(){if(!navigator.mediaDevices||!navigator.mediaDevices.enumerateDevices){alert("您的浏览器不支持WebRTC");return false;}return true;}static async getPermissions(){console.log("========== 获取权限 ===========");let stream=await navigator.mediaDevices.getUserMedia({audio:true,video:true});let tracks=stream.getTracks();tracks.forEach(item=>{item.stop();});stream=null;}static async GetInitLocalDevices(callback){await navigator.mediaDevices.enumerateDevices().then(devices=>{if(callback)callback(devices);devices.forEach(dev=>{console.log('device label: '+dev.label+' deviceId: '+dev.deviceId);});}).catch(function(err){console.log(err.name+": "+err.message);});}static bindOnDeviceChange(bindFunc){if(!bindFunc)bindFunc=function(event){console.log("device changed")};navigator.mediaDevices.ondevicechange=bindFunc;}join(callback){let jsonDataObj={"roomid":this._room,"account":this._localUser};console.log("join jsonDataObj ==>",jsonDataObj);this._socket.emit('join',jsonDataObj,callback);this._isJoinRoom=true;}leave(callback){let jsonDataObj={"roomid":this._room,"account":this._localUser};console.log("leave jsonDataObj ==>",jsonDataObj);if(this._isCalling){console.log("挂断与"+this._remoteUser+"的连接");this._socket.emit('1v1hangup',this._createMsg());this._doHangup();}this._socket.emit("leave",jsonDataObj,callback);this._localUser=null;this._isJoinRoom=false;}sendChatMessage(msg,callback){if(!msg)throw new Error("发送消息不能为空");let jsonDataObj={"roomid":this._room,"account":this._localUser,"message":msg};console.log("sendChatMessage jsonDataObj ==>",jsonDataObj);if(!this._checkJoinRoom())return;this._socket.emit('chatMessage',jsonDataObj,callback);}hangup(callback){if(!this._checkIsCalling())return;console.log("挂断与"+this._remoteUser+"的连接");this._socket.emit('1v1hangup',this._createMsg());this._doHangup();if(callback)callback();}call(callee,callback){if(!callee)throw new Error("被呼叫用户名参数callee不能为空");if(this._localUser===callee)throw new Error("不能跟自己进行视频会话");let jsonDataObj={"roomid":this._room,"caller":this._localUser,"callee":callee};console.log("call jsonDataObj ==>",jsonDataObj);if(!this._checkJoinRoom())return;this._socket.emit('call',jsonDataObj,callback);}async reply(data){if(!this._checkJoinRoom())return;console.log("reply ==> ",data);if(data.replyCode==1){this._isCalling=true;this._calleeUser=data.callee;this._callerUser=data.caller;this._remoteUser=data.caller;await this._createP2P(data);}this._socket.emit('reply',data);}muteAudio(flag){if(!this._checkIsCalling())return;this._doMute("audio",!flag);var data={"type":"audio","op":(flag?"mute":"unmute")};this._socket.emit('1v1mute',this._createMsg(data));}muteVideo(flag){if(!this._checkIsCalling())return;this._doMute("video",!flag);var data={"type":"video","op":(flag?"mute":"unmute")};this._socket.emit('1v1mute',this._createMsg(data));}async doChangeCamera(){if(!this._checkIsCalling())return;console.log("切摄像头流");this._socket.emit("changeCamera",this._createMsg());if(this._localstream){let tracks=this._localstream.getTracks();tracks.forEach(item=>{item.stop();item.enabled=false;item=null;});this._localstream=null;}await this._createAndPlay_localstream(this._local_stream_video);let vsender=this._peer.getSenders().find(sender=>{if(sender.track){return sender.track.kind==='video';}});let asender=this._peer.getSenders().find(sender=>{if(sender.track){return sender.track.kind==='audio';}});this._localstream.getTracks().forEach(track=>{if(track.kind=="video"){console.log("切换摄像头信号");vsender.replaceTrack(track);}else if(track.kind=="audio"){console.log("切换麦克风信号");asender.replaceTrack(track);}});};async doChangeBandwidth(bw){if(!this._checkIsCalling())return;if(!this._peer||!bw)return;var vsender=this._peer.getSenders().find(sender=>{if(sender.track){return sender.track.kind==='video';}});var parameters=vsender.getParameters();if(!parameters.encodings){parameters.encodings=[{}];}if(bw==='unlimited'){console.log("delete parameters.encodings[0].maxBitrate");delete parameters.encodings[0].maxBitrate;}else{parameters.encodings[0].maxBitrate=bw*1024;}await vsender.setParameters(parameters);}doLocalShare(){if(!this._checkIsCalling())return;this._doLocalShare();var data={"type":"video","op":"share"};this._socket.emit('shareLocal',this._createMsg(data));}stopLocalShare(){if(!this._checkIsCalling())return;this._stopLocalShare();var data={"type":"video","op":"unshare"};this._socket.emit('shareLocal',this._createMsg(data));}startRecord(){console.log("开始录制");this._startRecord();}stopRecord(){console.log("停止录制");this._stopRecord();};playRecord(videoDomId){console.log("播放录制");this._playRecord(videoDomId);}saveRecord(){console.log("保存录制");this._saveRecord();}_checkJoinRoom(){if(!this._isJoinRoom){alert("系统提示：未加入房间！");return false;}return true;}_checkIsCalling(){if(!this._isCalling){alert("系统提示：请先建立视频通话！");return false;}return true;}async _createAndPlay_localstream(domID){console.log("_createAndPlay_localstream ==> ",domID);this._localstream=await navigator.mediaDevices.getUserMedia(this._constraints);this._localstream_id=this._localstream.id;console.log("本地流对象",this._localstream);this._localstream.getTracks().forEach(track=>{console.log("******************");console.log(track);console.log("track.id = "+track.id);console.log("track.kind = "+track.kind);console.log("******************");});let video=document.querySelector("#"+domID);video.srcObject=this._localstream;video.play();}async _createP2P(data){console.log("执行createP2P");await this._createMedia(data);}async _createMedia(data){console.log("执行createMedia");try{console.log("_constraints = "+JSON.stringify(this._constraints));await this._createAndPlay_localstream(this._local_stream_video);}catch(e){console.error('getUserMedia: ',e)}this._initPeer(data);}_initPeer(data){console.log("执行initPeer");let PeerConnection=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection;this._peer=new PeerConnection(GGRtcClient.g_iceConfig);console.log("stream.id = "+this._localstream.id);this._peer.addStream(this._localstream);this._peer.onicecandidate=(event)=>{console.log("peer.onicecandidate");console.log(event);if(event.candidate){var data={};data.sdp=event.candidate;this._socket.emit('1v1ICE',this._createMsg(data));}};this._peer.ontrack=(event)=>{console.log("peer.ontrack");console.log(event);};this._peer.onaddstream=(event)=>{console.log("_peer.onaddstream");console.log(event.stream);console.log("_remotestream_id = "+this._remotestream_id);console.log("_remoteShareStream_id = "+this._remoteShareStream_id);event.stream.getTracks().forEach(track=>{console.log("******************");console.log(track);console.log("track.id = "+track.id);console.log("track.kind = "+track.kind);console.log("******************");});switch(event.stream.id){case this._remotestream_id:console.log("摄像头流");let video=document.querySelector('#'+this._remote_stream_video);video.srcObject=event.stream;video.play();break;case this._remoteShareStream_id:console.log("桌面分享流");let share=document.querySelector('#'+this._remote_share_stream_video);share.srcObject=event.stream;share.play();break;default:console.log("未知流id");}};this._peer.onnegotiationneeded=async(event)=>{if(!this._peer)return;console.log("+++ _peer.onnegotiationneeded +++");console.log("_peer.iceConnectionState = "+this._peer.iceConnectionState);if(this._peer&&this._peer.iceConnectionState==="failed"){await this._createOffer(this._createMsg());}};this._peer.oniceconnectionstatechange=(event)=>{if(!this._peer)return;console.log("_peer.oniceconnectionstatechange",this._peer.iceConnectionState);if(this._peer&&this._peer.iceConnectionState==="failed"){console.log("网络发生变化，需要重新ice协商");}};this._peer.onconnectionstatechange=(event)=>{if(!this._peer)return;console.log("_peer.onconnectionstatechange",this._peer.connectionState);if(!this._peer)console.log("WebRTC连接状态变更，但是_peer已注销");switch(this._peer.connectionState){case'connected':const config=this._peer.getConfiguration();console.log("*** Connection Configuration: "+JSON.stringify(config));console.log("开启实时码率显示");this._showStats();let cbFuncName="onP2PConnectCompleted";if(this.callbackFunc[cbFuncName]){this.callbackFunc[cbFuncName]();}break;case'disconnected':break;case'failed':console.warn("Connection failed, now restartIce()...");console.log("_peer == null "+(this._peer==null));console.log(this._peer);if(this._peer.restartIce)this._peer.restartIce();setTimeout(()=>{if(this._peer.iceConnectionState!=='connected'){console.error("restartIce failed! close video call! Connection state:"+this._peer.connectionState);this._doHangup();}},10000);break;}};console.log("执行initPeer完毕");}async _createOffer(data,streamType,streamId){console.log("执行createOffer");console.log(data);try{let offer=await this._peer.createOffer(this._offerOption);await this._peer.setLocalDescription(offer);data=this._createMsg(data);data.sdp=offer;if(streamType)data.streamType=streamType;if(streamId)data.streamId=streamId;console.log("准备发送1v1offer:"+　JSON.stringify(data));this._socket.emit('1v1offer',data);}catch(e){console.error('createOffer: ',e);}}_createMsg(data){var msg=data||{};msg.roomId=this._room;msg.from=this._localUser;msg.to=this._remoteUser;msg.callee=this._calleeUser;msg.caller=this._callerUser;return msg;};async _onOffer(data){console.log("执行onOffer："+JSON.stringify(data));if(data.streamType=="camera")this._remotestream_id=data.streamId;else if(data.streamType=="share")this._remoteShareStream_id=data.streamId;try{console.log("await peer.setRemoteDescription == begin");await this._peer.setRemoteDescription(data.sdp);console.log("await peer.setRemoteDescription == end");console.log("await peer.createAnswer == begin");let answer=await this._peer.createAnswer();console.log("await peer.createAnswer == end");console.log("await peer.setLocalDescription == begin");await this._peer.setLocalDescription(answer);console.log("await peer.setLocalDescription == end");if(data.streamType=="camera"&&this._localstream_id)data.streamId=this._localstream_id;else if(data.streamType=="share"&&this._localShareStream_id)data.streamId=this._localShareStream_id;data.sdp=answer;console.log("准备发送1v1answer："+JSON.stringify(data));this._socket.emit("1v1answer",data);}catch(e){console.error("onOffer: ",e);}};async _onAnswer(data){console.log("执行onAnswer");if(data.streamType=="camera")this._remotestream_id=data.streamId;else if(data.streamType=="share")this._remoteShareStream_id=data.streamId;try{await this._peer.setRemoteDescription(data.sdp);}catch(e){console.error('onAnswer: ',e);}};async _onIce(data){console.log("执行onIce："+JSON.stringify(data));try{await this._peer.addIceCandidate(data.sdp);console.log("执行onIce添加成功");}catch(e){console.error('onIce: ',e);}};_doHangup(){console.log("doHangup执行挂断");this._stopLocalShare();this._clearShowStats();this._stopLocalStream();if(this._peer){this._peer.close();this._peer=null;}this._calleeUser=null;this._callerUser=null;this._remoteUser=null;this._remotestream_id=null;this._remoteShareStream_id=null;this._isCalling=false;}_stopLocalStream(){if(this._localstream){this._peer.removeStream(this._localstream);let tracks=this._localstream.getTracks();tracks.forEach(item=>{item.stop();item.enabled=false;item=null;});this._localstream=null;this._localstream_id=null;}}_doMute(type,enabled){console.log("_doMute",type,enabled);var tracks=this._localstream.getTracks();tracks.forEach(item=>{if(item.kind==type){item.enabled=enabled;}});};_setVideoTrackContentHints(shareStream,hint){const track=shareStream.getVideoTracks()[0];if("contentHint"in track){track.contentHint=hint;console.log("shareStream.videotrack.contentHint = ",track.contentHint);if(track.contentHint!==hint){console.log("Invalid video track contentHint:\'"+hint+"\'");}}else{console.log("MediaStreamTrack contentHint attribute not supported");}}_doLocalShare(videoDomId){navigator.mediaDevices.getDisplayMedia({video:true}).then(share_stream=>{console.log("本地分享流：",share_stream);this._localShareStream=share_stream;this._localShareStream_id=share_stream.id;this._setVideoTrackContentHints(this._localShareStream,"motion");share_stream.getVideoTracks()[0].addEventListener('ended',()=>{console.log('用户已结束共享屏幕');this.stopLocalShare();let cbFuncName="onStopLocalShareBySystsem";if(this.callbackFunc[cbFuncName]){this.callbackFunc[cbFuncName]();}});console.log("打印分享流track信息");share_stream.getTracks().forEach(track=>{console.log("******************");console.log(track);console.log("track.id = "+track.id);console.log("track.kind = "+track.kind);console.log("******************");});console.log("开始推送分享流");this._peer.addStream(this._localShareStream);this._createOffer(this._createMsg(),"share",share_stream.id);}).catch(error=>{console.log(error);});};_stopLocalShare(){console.log("停止并清空分享流");if(this._localShareStream){console.log("++++++++++++++++++++========================");this._peer.removeStream(this._localShareStream);this._localShareStream.getTracks().forEach(item=>{console.log(item);console.log(item.kind);console.log(item.getCapabilities());item.stop();item=null;});this._localShareStream_id=null;this._localShareStream=null;}};_showStats(){if(!this._checkIsCalling())return;if(!this._peer)return;if(this._disableRateMonitor)return;if(!this.callbackFunc["onStreamRate"])return;var last_receivedTotalBytes=0;var last_sendTotalBytes=0;this._clearShowStats();this._showStatInterval=setInterval(async()=>{var receivedBytes=0;var sendBytes=0;var statReportTest=await this._peer.getStats();statReportTest.forEach(report=>{if(report.id.startsWith("RTCTransport")){receivedBytes=report.bytesReceived-last_receivedTotalBytes;last_receivedTotalBytes=report.bytesReceived;sendBytes=report.bytesSent-last_sendTotalBytes;last_sendTotalBytes=report.bytesSent;}});this.callbackFunc["onStreamRate"](Math.floor(sendBytes/1024),Math.floor(receivedBytes/1024));},1000);};_clearShowStats(){if(this._showStatInterval){console.log("清理定时器对象");clearInterval(this._showStatInterval);}}_startRecord(){if(!this._checkIsCalling())return;this._recBuffer=[];var options={mimeType:"video/webm;codecs=h264"};if(!MediaRecorder.isTypeSupported(options.mimeType)){console.error(options.mimeType+" is not suppported!");return;}try{this._mediaRecorder=new MediaRecorder(this._localstream,options);}catch(e){console.error("Failed to create MediaRecoder!");return;}this._mediaRecorder.ondataavailable=(e)=>{if(e&&e.data&&e.data.size>0){this._recBuffer.push(e.data);}};this._mediaRecorder.start(100);};_stopRecord(){if(!this._mediaRecorder)return;this._mediaRecorder.stop();};_playRecord(videoDomId){if(!videoDomId)return;if(!this._recBuffer)return;var blob=new Blob(this._recBuffer,{type:'video/webm'});var recvideoplay=document.querySelector("#"+videoDomId);recvideoplay.src=window.URL.createObjectURL(blob);recvideoplay.srcObject=null;recvideoplay.controls=true;recvideoplay.play();}_saveRecord(){if(!this._recBuffer)return;var blob=new Blob(this._recBuffer,{type:'video/webm'});var url=window.URL.createObjectURL(blob);var a=document.createElement("a");a.href=url;a.style.display="none";a.download="video.webm";a.click();}}